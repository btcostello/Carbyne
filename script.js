/*************************
  DRAWER
*************************/
document.getElementById('toggleDrawer').addEventListener('click', function () {
  const body = document.body;
  const drawer = document.getElementById('drawer');
  const button = this;
  body.classList.toggle('aks-drawer-open');
  const isOpen = body.classList.contains('aks-drawer-open');
  drawer.setAttribute('aria-hidden', (!isOpen).toString());
  button.setAttribute('aria-expanded', isOpen.toString());
});

/*************************
  MAIN LOGIC
*************************/
var autoUpdate = true

// Initial death benefit by age (provided values)
const initialDeathBenefitByAgePref = {
  20: 2962468, 21: 2893355.6, 22: 2824243.2, 23: 2755130.8, 24: 2686018.4, 25: 2616906, 26: 2554015.6, 27: 2491125.2, 28: 2428234.8, 29: 2365344.4, 30: 2302454, 31: 2245371.8, 32: 2188289.6, 33: 2131207.4, 34: 2074125.2, 35: 2017043, 36: 1963578.4, 37: 1910113.8, 38: 1856649.2, 39: 1803184.6, 40: 1749720, 41: 1696626.6, 42: 1643533.2, 43: 1590439.8, 44: 1537346.4, 45: 1484253, 46: 1435985, 47: 1387717, 48: 1339449, 49: 1291181, 50: 1242913, 51: 1215558.8, 52: 1188204.6, 53: 1160850.4, 54: 1133496.2, 55: 1106142, 56: 1086613.2, 57: 1067084.4, 58: 1047555.6, 59: 1028026.8, 60: 1008498, 61: 990416.6, 62: 972335.2, 63: 954253.8, 64: 936172.4, 65: 918091, 66: 900966, 67: 883841, 68: 866716, 69: 849591, 70: 832466
};
const initialDeathBenefitByAgeStd = {
  20: 2961693, 21: 2892603.6, 22: 2823514.2, 23: 2754424.8, 24: 2685335.4, 25: 2616246, 26: 2553373.6, 27: 2490501.2, 28: 2427628.8, 29: 2364756.4, 30: 2301884, 31: 2244820.6, 32: 2187757.2, 33: 2130693.8, 34: 2073630.4, 35: 2016567, 36: 1962415.4, 37: 1908263.8, 38: 1854112.2, 39: 1799960.6, 40: 1745809, 41: 1692444.6, 42: 1639080.2, 43: 1585715.8, 44: 1532351.4, 45: 1478987, 46: 1430829.8, 47: 1382672.6, 48: 1334515.4, 49: 1286358.2, 50: 1238201, 51: 1211789.2, 52: 1185377.4, 53: 1158965.6, 54: 1132553.8, 55: 1106142, 56: 1086613.2, 57: 1067084.4, 58: 1047555.6, 59: 1028026.8, 60: 1008498, 61: 990416.6, 62: 972335.2, 63: 954253.8, 64: 936172.4, 65: 918091, 66: 900966, 67: 883841, 68: 866716, 69: 849591, 70: 832466 
};
const initialDeathBenefitByAgeSubst = {
  20: 1782570, 21: 1753791.8, 22: 1725013.6, 23: 1696235.4, 24: 1667457.2, 25: 1638679, 26: 1611946.2, 27: 1585213.4, 28: 1558480.6, 29: 1531747.8, 30: 1505015, 31: 1479534, 32: 1454053, 33: 1428572, 34: 1403091, 35: 1377610, 36: 1354799, 37: 1331988, 38: 1309177, 39: 1286366, 40: 1263555, 41: 1243756.2, 42: 1223957.4, 43: 1204158.6, 44: 1184359.8, 45: 1164561, 46: 1145962, 47: 1127363, 48: 1108764, 49: 1090165, 50: 1071566, 51: 1053497.4, 52: 1035428.8, 53: 1017360.2, 54: 999291.6, 55: 981223, 56: 963743.4, 57: 946263.8, 58: 928784.2, 59: 911304.6, 60: 893825, 61: 876979.6, 62: 860134.2, 63: 843288.8, 64: 826443.4, 65: 809598, 66: 792729.2, 67: 775860.4, 68: 758991.6, 69: 742122.8, 70: 725254
};
const perUnitFactorPref = {
  20: 2.9412, 21: 3.06698, 22: 3.19277, 23: 3.31855, 24: 3.44434, 25: 3.57012, 26: 3.7249, 27: 3.87967, 28: 4.03445, 29: 4.18922, 30: 4.344, 31: 4.5139, 32: 4.68379, 33: 4.85369, 34: 5.02358, 35: 5.19348, 36: 5.51146, 37: 5.82943, 38: 6.14741, 39: 6.46538, 40: 6.78336, 41: 7.0823, 42: 7.38125, 43: 7.68019, 44: 7.97914, 45: 8.27808, 46: 8.81638, 47: 9.35467, 48: 9.89297, 49: 10.43126, 50: 10.96956, 51: 11.52286, 52: 12.07615, 53: 12.62945, 54: 13.18274, 55: 13.73604, 56: 14.5368, 57: 15.33756, 58: 16.13832, 59: 16.93908, 60: 17.73984, 61: 18.59964, 62: 19.45944, 63: 20.31924, 64: 21.17904, 65: 22.03884, 66: 22.59778, 67: 23.15671, 68: 23.71565, 69: 24.27458, 70: 24.83352
};
const perUnitFactorStd = {
  20: 3.0132, 21: 3.13987, 22: 3.26654, 23: 3.39322, 24: 3.51989, 25: 3.64656, 26: 3.80258, 27: 3.95861, 28: 4.11463, 29: 4.27066, 30: 4.42668, 31: 4.59737, 32: 4.76806, 33: 4.93874, 34: 5.10943, 35: 5.28012, 36: 5.60604, 37: 5.93196, 38: 6.25788, 39: 6.5838, 40: 6.90972, 41: 7.23082, 42: 7.55191, 43: 7.87301, 44: 8.1941, 45: 8.5152, 46: 9.06672, 47: 9.61824, 48: 10.16976, 49: 10.72128, 50: 11.2728, 51: 11.8152, 52: 12.3576, 53: 12.9, 54: 13.4424, 55: 13.9848, 56: 14.81222, 57: 15.63965, 58: 16.46707, 59: 17.2945, 60: 18.12192, 61: 18.96638, 62: 19.81085, 63: 20.65531, 64: 21.49978, 65: 22.34424, 66: 22.89122, 67: 23.43821, 68: 23.98519, 69: 24.53218, 70: 25.07916
};
const corrFactor = {
  20: 2.5, 21: 2.5, 22: 2.5, 23: 2.5, 24: 2.5,
  25: 2.5, 26: 2.5, 27: 2.5, 28: 2.5, 29: 2.5,
  30: 2.5, 31: 2.5, 32: 2.5, 33: 2.5, 34: 2.5,
  35: 2.5, 36: 2.5, 37: 2.5, 38: 2.5, 39: 2.5,
  40: 2.5, 41: 2.43, 42: 2.36, 43: 2.29, 44: 2.22,
  45: 2.15, 46: 2.09, 47: 2.03, 48: 1.97, 49: 1.91,
  50: 1.85, 51: 1.78, 52: 1.71, 53: 1.64, 54: 1.57,
  55: 1.5, 56: 1.46, 57: 1.42, 58: 1.38, 59: 1.34,
  60: 1.3, 61: 1.28, 62: 1.26, 63: 1.24, 64: 1.22,
  65: 1.2, 66: 1.19, 67: 1.18, 68: 1.17, 69: 1.16,
  70: 1.15, 71: 1.13, 72: 1.11, 73: 1.09, 74: 1.07,
  75: 1.05, 76: 1.05, 77: 1.05, 78: 1.05, 79: 1.05,
  80: 1.05, 81: 1.05, 82: 1.05, 83: 1.05, 84: 1.05,
  85: 1.05, 86: 1.05, 87: 1.05, 88: 1.05, 89: 1.05,
  90: 1.05, 91: 1.04, 92: 1.03, 93: 1.02, 94: 1.01,
  95: 1.01, 96: 1.01, 97: 1.01, 98: 1.01, 99: 1.01,
  100: 1, 101: 1, 102: 1, 103: 1, 104: 1,
  105: 1, 106: 1, 107: 1, 108: 1, 109: 1,
  110: 1, 111: 1, 112: 1, 113: 1, 114: 1,
  115: 1, 116: 1, 117: 1, 118: 1, 119: 1,
  120: 1, 121: 1
};
const perPol = 252
const COI = [[0.0393, 0.0403, 0.0451, 0.0422, 0.0412, 0.0376, 0.0376, 0.0339, 0.0303, 0.0303, 0.0284, 0.0284, 0.0293, 0.0321, 0.0358, 0.0385, 0.044, 0.0504, 0.0578, 0.0651, 0.0715, 0.0752, 0.0779, 0.0825, 0.088, 0.0935, 0.0963, 0.1, 0.1027, 0.1064, 0.111, 0.1183, 0.1275, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416],[0.0326, 0.0403, 0.0364, 0.0335, 0.0326, 0.0312, 0.0303, 0.0284, 0.0257, 0.0275, 0.0275, 0.0284, 0.0303, 0.0339, 0.0367, 0.0403, 0.0458, 0.0513, 0.0596, 0.0669, 0.0715, 0.0752, 0.0798, 0.0844, 0.0908, 0.0963, 0.1, 0.1027, 0.1064, 0.111, 0.1183, 0.1275, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333],[0.0316, 0.0335, 0.0297, 0.0278, 0.0268, 0.0257, 0.0248, 0.0238, 0.0229, 0.0266, 0.0275, 0.0284, 0.0303, 0.0339, 0.0385, 0.0413, 0.0468, 0.0532, 0.0614, 0.0688, 0.0724, 0.0752, 0.0798, 0.0862, 0.0926, 0.1, 0.1027, 0.1064, 0.111, 0.1183, 0.1275, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333],[0.0268, 0.0278, 0.0249, 0.024, 0.023, 0.0211, 0.0211, 0.0211, 0.022, 0.0257, 0.0275, 0.0303, 0.0321, 0.0358, 0.0403, 0.0431, 0.0495, 0.0559, 0.0633, 0.0688, 0.0734, 0.0752, 0.0798, 0.0862, 0.0954, 0.1027, 0.1064, 0.111, 0.1183, 0.1275, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333],[0.022, 0.023, 0.0211, 0.0201, 0.0201, 0.0183, 0.0183, 0.0202, 0.022, 0.0257, 0.0275, 0.0303, 0.0339, 0.0385, 0.0422, 0.0449, 0.0504, 0.0587, 0.066, 0.0688, 0.0734, 0.0752, 0.0789, 0.088, 0.0963, 0.1064, 0.111, 0.1183, 0.1275, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333],[0.0192, 0.0201, 0.0192, 0.0182, 0.0192, 0.0183, 0.0174, 0.0202, 0.022, 0.0266, 0.0284, 0.033, 0.0367, 0.0403, 0.044, 0.0477, 0.0541, 0.0614, 0.0669, 0.0688, 0.0734, 0.0752, 0.0825, 0.0935, 0.1018, 0.111, 0.1183, 0.1275, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0173, 0.0182, 0.0173, 0.0173, 0.0173, 0.0174, 0.0183, 0.0211, 0.0229, 0.0284, 0.0312, 0.0358, 0.0385, 0.0431, 0.0468, 0.0513, 0.0587, 0.0651, 0.0688, 0.0697, 0.0734, 0.0789, 0.089, 0.0981, 0.1091, 0.1183, 0.1275, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0153, 0.0163, 0.0163, 0.0163, 0.0182, 0.0183, 0.0193, 0.022, 0.0238, 0.0303, 0.0339, 0.0385, 0.0413, 0.0468, 0.0504, 0.055, 0.0623, 0.0669, 0.0697, 0.0734, 0.077, 0.0862, 0.0945, 0.1064, 0.1165, 0.1275, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0134, 0.0144, 0.0153, 0.0173, 0.0192, 0.0183, 0.0202, 0.0229, 0.0257, 0.0321, 0.0367, 0.0413, 0.044, 0.0495, 0.055, 0.0587, 0.066, 0.0688, 0.0734, 0.077, 0.0844, 0.0926, 0.1036, 0.1147, 0.1266, 0.1394, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0125, 0.0134, 0.0163, 0.0182, 0.0192, 0.0202, 0.022, 0.0257, 0.0284, 0.0358, 0.0403, 0.044, 0.0486, 0.0532, 0.0578, 0.0623, 0.0688, 0.0734, 0.077, 0.0825, 0.0908, 0.1009, 0.1119, 0.1238, 0.1376, 0.1504, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0115, 0.0125, 0.0163, 0.0192, 0.0192, 0.0202, 0.022, 0.0257, 0.0293, 0.0367, 0.0422, 0.0449, 0.0486, 0.0541, 0.0587, 0.0642, 0.0724, 0.077, 0.0816, 0.089, 0.0981, 0.1091, 0.122, 0.1348, 0.1495, 0.1615, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0096, 0.0105, 0.0163, 0.0192, 0.0192, 0.0202, 0.022, 0.0266, 0.0321, 0.0385, 0.0422, 0.0458, 0.0504, 0.055, 0.0605, 0.0697, 0.0752, 0.0816, 0.0871, 0.0963, 0.1064, 0.1183, 0.1312, 0.1459, 0.1605, 0.1725, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0105, 0.0105, 0.0163, 0.0192, 0.0211, 0.0202, 0.0248, 0.0284, 0.0348, 0.0422, 0.0449, 0.0486, 0.0513, 0.0578, 0.0651, 0.0734, 0.0807, 0.0871, 0.0945, 0.1027, 0.1147, 0.1284, 0.1422, 0.1578, 0.1716, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0105, 0.0115, 0.0173, 0.0201, 0.022, 0.0229, 0.0266, 0.0321, 0.0385, 0.0449, 0.0468, 0.0504, 0.0541, 0.0614, 0.0697, 0.0761, 0.0862, 0.0926, 0.1, 0.1101, 0.1229, 0.1376, 0.1541, 0.1688, 0.1817, 0.1918, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0105, 0.0125, 0.0192, 0.0211, 0.024, 0.0257, 0.0303, 0.0358, 0.0422, 0.0477, 0.0495, 0.0523, 0.0587, 0.0669, 0.0734, 0.0825, 0.0908, 0.0981, 0.1073, 0.1192, 0.1339, 0.1504, 0.1651, 0.1798, 0.1927, 0.2037, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0105, 0.0125, 0.0192, 0.023, 0.0259, 0.0284, 0.0312, 0.0385, 0.0449, 0.0495, 0.0513, 0.0559, 0.0633, 0.0715, 0.0789, 0.088, 0.0963, 0.1046, 0.1147, 0.1284, 0.1449, 0.1624, 0.178, 0.1927, 0.2046, 0.2184, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0105, 0.0134, 0.0211, 0.0249, 0.0288, 0.0312, 0.0358, 0.0422, 0.0477, 0.0504, 0.055, 0.0614, 0.0688, 0.0761, 0.0844, 0.0935, 0.1018, 0.1119, 0.1238, 0.1403, 0.1587, 0.1771, 0.1927, 0.2065, 0.2212, 0.2377, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0105, 0.0144, 0.022, 0.0278, 0.0316, 0.0339, 0.0403, 0.0449, 0.0495, 0.0541, 0.0596, 0.0669, 0.0743, 0.0816, 0.0908, 0.099, 0.1091, 0.1202, 0.1358, 0.1532, 0.1743, 0.1918, 0.2074, 0.223, 0.2405, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0108, 0.0166, 0.0255, 0.0304, 0.0343, 0.0376, 0.044, 0.0477, 0.0532, 0.0596, 0.066, 0.0724, 0.0807, 0.089, 0.0972, 0.1073, 0.1183, 0.1312, 0.1495, 0.1706, 0.1909, 0.2092, 0.2248, 0.2423, 0.2634, 0.291, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0118, 0.0196, 0.0284, 0.0323, 0.0372, 0.0422, 0.0468, 0.0513, 0.0578, 0.0651, 0.0724, 0.0798, 0.088, 0.0963, 0.1055, 0.1165, 0.1303, 0.1459, 0.167, 0.1899, 0.2092, 0.2267, 0.2441, 0.2634, 0.2919, 0.3223, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0127, 0.0215, 0.0313, 0.0362, 0.0421, 0.0458, 0.0495, 0.0559, 0.0633, 0.0715, 0.0789, 0.0871, 0.0963, 0.1055, 0.1156, 0.1275, 0.144, 0.1642, 0.1863, 0.2092, 0.2285, 0.2469, 0.2653, 0.291, 0.3241, 0.3443, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0137, 0.0255, 0.0343, 0.0392, 0.046, 0.0486, 0.0532, 0.0596, 0.0688, 0.0779, 0.0862, 0.0945, 0.1055, 0.1156, 0.1275, 0.1422, 0.1615, 0.1844, 0.2083, 0.2304, 0.2487, 0.2662, 0.2892, 0.3223, 0.3453, 0.3821, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0166, 0.0284, 0.0372, 0.0421, 0.049, 0.0504, 0.0559, 0.0642, 0.0743, 0.0834, 0.0926, 0.1027, 0.1147, 0.1275, 0.1403, 0.1587, 0.1817, 0.2074, 0.2322, 0.2515, 0.268, 0.2892, 0.3168, 0.3407, 0.3793, 0.4226, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0196, 0.0313, 0.0392, 0.046, 0.0519, 0.0532, 0.0605, 0.0697, 0.0807, 0.0908, 0.1, 0.111, 0.1257, 0.1403, 0.156, 0.1771, 0.2037, 0.2304, 0.2533, 0.2708, 0.2901, 0.3149, 0.3379, 0.3765, 0.4189, 0.4658, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0225, 0.0333, 0.0421, 0.0509, 0.0558, 0.0568, 0.0651, 0.0761, 0.0871, 0.0963, 0.1073, 0.1211, 0.1376, 0.1541, 0.1725, 0.1973, 0.2267, 0.2533, 0.2735, 0.291, 0.3122, 0.3361, 0.3747, 0.4189, 0.464, 0.5165, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0255, 0.0353, 0.045, 0.0548, 0.0597, 0.0614, 0.0715, 0.0834, 0.0935, 0.1036, 0.1174, 0.133, 0.1514, 0.1688, 0.1918, 0.2184, 0.2496, 0.2754, 0.2938, 0.3158, 0.3315, 0.3738, 0.4198, 0.4677, 0.5174, 0.5755, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0294, 0.0372, 0.049, 0.0588, 0.0637, 0.0669, 0.0789, 0.0908, 0.1009, 0.1128, 0.1284, 0.1468, 0.1661, 0.1853, 0.2101, 0.2405, 0.2717, 0.2947, 0.3177, 0.3333, 0.3673, 0.4198, 0.4695, 0.5211, 0.5792, 0.6447, 0.7296, 0.8266, 0.9385, 1.0635, 1.1998, 1.3502, 1.5175, 1.7085, 1.9316, 2.2602, 2.6407, 2.9631, 3.4373, 3.9996, 4.6659, 5.4489, 6.2431, 7.3352, 8.5623, 9.5946, 10.978, 12.4433, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0323, 0.0382, 0.0509, 0.0637, 0.0705, 0.0769, 0.09, 0.1013, 0.1116, 0.1266, 0.1454, 0.1651, 0.1858, 0.2083, 0.2356, 0.2675, 0.3014, 0.3277, 0.3428, 0.3729, 0.419, 0.4821, 0.5377, 0.5989, 0.6659, 0.7462, 0.8454, 0.9598, 1.0876, 1.227, 1.3808, 1.552, 1.7474, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0353, 0.0411, 0.0568, 0.0695, 0.0774, 0.0882, 0.1004, 0.1097, 0.1229, 0.1407, 0.1614, 0.182, 0.2027, 0.2262, 0.2563, 0.292, 0.3268, 0.3465, 0.3747, 0.4133, 0.4708, 0.5433, 0.6037, 0.6725, 0.7509, 0.8454, 0.9598, 1.0876, 1.227, 1.3808, 1.552, 1.7474, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0372, 0.0441, 0.0617, 0.0744, 0.0872, 0.0975, 0.1097, 0.1201, 0.1351, 0.1567, 0.1792, 0.1989, 0.2187, 0.245, 0.2779, 0.3164, 0.3446, 0.3757, 0.4114, 0.4604, 0.5292, 0.6093, 0.6791, 0.7575, 0.8482, 0.9598, 1.0876, 1.227, 1.3808, 1.552, 1.7474, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0382, 0.049, 0.0686, 0.0813, 0.097, 0.1088, 0.1191, 0.1304, 0.1501, 0.1755, 0.198, 0.214, 0.2365, 0.2657, 0.3023, 0.3352, 0.3738, 0.4086, 0.4529, 0.5122, 0.5933, 0.6772, 0.7603, 0.8567, 0.9636, 1.0876, 1.227, 1.3808, 1.552, 1.7474, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0382, 0.0558, 0.0754, 0.0901, 0.1087, 0.1173, 0.1257, 0.1407, 0.1661, 0.1961, 0.2149, 0.2356, 0.2563, 0.2882, 0.323, 0.3672, 0.4077, 0.4482, 0.5019, 0.5725, 0.6603, 0.7499, 0.8472, 0.9598, 1.0867, 1.227, 1.3808, 1.552, 1.7474, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0382, 0.0637, 0.0842, 0.0999, 0.1176, 0.1238, 0.1351, 0.1539, 0.1849, 0.2159, 0.2346, 0.2563, 0.2807, 0.3136, 0.3597, 0.4058, 0.4491, 0.4971, 0.5622, 0.6452, 0.7395, 0.8359, 0.9437, 1.0734, 1.2204, 1.3808, 1.552, 1.7474, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0382, 0.0695, 0.0931, 0.1117, 0.1283, 0.1313, 0.1454, 0.1698, 0.2055, 0.2365, 0.2572, 0.2798, 0.3061, 0.3522, 0.402, 0.4529, 0.5028, 0.5669, 0.6338, 0.7254, 0.8274, 0.9361, 1.0592, 1.2061, 1.3704, 1.552, 1.7474, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0392, 0.0774, 0.1029, 0.1274, 0.1372, 0.1417, 0.1604, 0.1896, 0.2281, 0.2581, 0.2798, 0.3023, 0.3475, 0.402, 0.4576, 0.5085, 0.5707, 0.6376, 0.7235, 0.8217, 0.9314, 1.0658, 1.2166, 1.3827, 1.5511, 1.7474, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0392, 0.0833, 0.1146, 0.1362, 0.148, 0.1511, 0.1736, 0.213, 0.2525, 0.2826, 0.3061, 0.3446, 0.4002, 0.4604, 0.5132, 0.5744, 0.6404, 0.7216, 0.8227, 0.9371, 1.0602, 1.2166, 1.3847, 1.5644, 1.7674, 1.9755, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.045, 0.0862, 0.1264, 0.146, 0.1578, 0.167, 0.1971, 0.2403, 0.2788, 0.307, 0.3437, 0.3954, 0.4576, 0.5188, 0.5782, 0.6452, 0.7263, 0.8255, 0.9428, 1.0696, 1.2175, 1.3913, 1.5796, 1.7874, 1.9975, 2.3116, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0558, 0.0891, 0.1391, 0.1587, 0.1735, 0.1849, 0.2252, 0.2704, 0.3033, 0.3418, 0.3898, 0.4529, 0.5226, 0.5839, 0.6461, 0.7282, 0.8274, 0.9409, 1.0725, 1.2175, 1.3808, 1.572, 1.8008, 2.0205, 2.3346, 2.7007, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0666, 0.0931, 0.147, 0.1715, 0.1892, 0.2093, 0.2563, 0.2976, 0.3362, 0.3813, 0.4425, 0.516, 0.5867, 0.6527, 0.7301, 0.8236, 0.9447, 1.0772, 1.2251, 1.3875, 1.5873, 1.8122, 2.0434, 2.3586, 2.7257, 3.0304, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.0813, 0.098, 0.1558, 0.1862, 0.2029, 0.2375, 0.2845, 0.3277, 0.371, 0.4284, 0.5, 0.5772, 0.6574, 0.7367, 0.8227, 0.9343, 1.0772, 1.228, 1.3866, 1.5673, 1.7893, 2.0453, 2.3826, 2.7508, 3.0594, 3.5154, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.097, 0.1078, 0.1617, 0.1901, 0.2235, 0.2638, 0.3146, 0.3588, 0.4096, 0.4802, 0.5641, 0.6508, 0.7339, 0.8189, 0.921, 1.0583, 1.2251, 1.396, 1.5825, 1.8027, 2.0616, 2.4075, 2.7758, 3.0894, 3.5465, 4.0905, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1161, 0.1311, 0.1821, 0.2132, 0.2623, 0.291, 0.3437, 0.3907, 0.4519, 0.5339, 0.6253, 0.7169, 0.8057, 0.9059, 1.0327, 1.1967, 1.3847, 1.5796, 1.796, 2.0472, 2.4008, 2.8018, 3.1184, 3.5785, 4.1247, 4.772, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1221, 0.1501, 0.1922, 0.2252, 0.2924, 0.3202, 0.37, 0.4246, 0.4981, 0.5905, 0.6876, 0.783, 0.8832, 1.0024, 1.1568, 1.3466, 1.5616, 1.7903, 2.0587, 2.4142, 2.8269, 3.1483, 3.6115, 4.1598, 4.8093, 5.5728, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1271, 0.1711, 0.2062, 0.2503, 0.3235, 0.3475, 0.4002, 0.4632, 0.5499, 0.6518, 0.7528, 0.8567, 0.9712, 1.1142, 1.2973, 1.513, 1.7559, 2.0176, 2.3778, 2.7941, 3.1793, 3.6436, 4.194, 4.8466, 5.6134, 6.385, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1311, 0.1922, 0.2302, 0.2814, 0.3616, 0.3776, 0.434, 0.5085, 0.6055, 0.7169, 0.8227, 0.9314, 1.0649, 1.2318, 1.4398, 1.693, 1.9889, 2.3749, 2.8153, 3.2102, 3.6766, 4.2301, 4.885, 5.654, 6.4319, 7.5019, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1351, 0.2172, 0.2583, 0.3175, 0.4027, 0.4124, 0.4755, 0.5612, 0.6706, 0.7924, 0.904, 1.0232, 1.1786, 1.3704, 1.6025, 1.8953, 2.2943, 2.7411, 3.1754, 3.7097, 4.2653, 4.9234, 5.6956, 6.4788, 7.5494, 8.7569, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1421, 0.2403, 0.2914, 0.3596, 0.4519, 0.4548, 0.5264, 0.6235, 0.7462, 0.8813, 1.0043, 1.1369, 1.3134, 1.532, 1.7903, 2.2014, 2.7257, 3.1831, 3.7437, 4.3015, 4.9617, 5.7363, 6.5258, 7.5968, 8.8029, 9.8126, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1501, 0.2613, 0.3295, 0.4058, 0.5062, 0.5047, 0.5839, 0.6952, 0.8331, 0.9901, 1.136, 1.2906, 1.494, 1.7416, 2.0721, 2.5477, 3.0836, 3.6805, 4.3377, 5.0011, 5.778, 6.5738, 7.6443, 8.8489, 9.8643, 11.2275, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1621, 0.2834, 0.3696, 0.46, 0.5524, 0.5641, 0.6527, 0.7773, 0.9399, 1.1265, 1.3001, 1.5016, 1.7159, 2.0329, 2.4123, 2.9001, 3.5892, 4.282, 5.0405, 5.8196, 6.6208, 7.6918, 8.8959, 9.9159, 11.2746, 12.7261, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1761, 0.3054, 0.4138, 0.5202, 0.6188, 0.6291, 0.7301, 0.8737, 1.0848, 1.2916, 1.5092, 1.735, 2.0348, 2.4267, 2.797, 3.4087, 4.1784, 4.9785, 5.8623, 6.6698, 7.7404, 8.942, 9.9686, 11.3228, 12.7665, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333],[0.1892, 0.3225, 0.4549, 0.5755, 0.6781, 0.6867, 0.8057, 1.0119, 1.2175, 1.4607, 1.7445, 2.0367, 2.4401, 2.8192, 3.4029, 4.069, 4.9913, 5.905, 6.7179, 7.7889, 8.9891, 10.0214, 11.371, 12.8079, 13.452, 13.452, 12.4899, 11.5381, 10.5962, 9.6642, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 8.7416, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333, 83.333]];
const stressTestRate = 0

// Load and save case
document.addEventListener('DOMContentLoaded', function() {
  const loadCaseButton = document.getElementById('loadCaseButton');
  const loadCaseFile = document.getElementById('loadCaseFile');
  const saveCaseButton = document.getElementById('saveCaseButton');
  if (saveCaseButton) {
    saveCaseButton.addEventListener('click', saveCase);
  }
  if (loadCaseButton && loadCaseFile) {
    // When the load button is clicked, trigger the file input
    loadCaseButton.addEventListener('click', function() {
      loadCaseFile.click();
    });
  };
})

// Format currency
function formatCurrency(value) {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(value);
}

// Format percentage
function formatPercentage(value) {
  // Ensure the value is a number
  const numValue = typeof value === 'string' ? parseFloat(value) : value;
  return new Intl.NumberFormat('en-US', {
    style: 'percent',
    minimumFractionDigits: 1,
    maximumFractionDigits: 1
  }).format(numValue / 100);
}

// Calculate income values
function calculateIncomeValues() {
  // Get input values
  const baseIncome = parseFloat(document.getElementById('baseIncome').value.replace(/,/g, '')) || 0;
  const bonusIncome = parseFloat(document.getElementById('bonusIncome').value.replace(/,/g, '')) || 0;
  const monthlyExpenses = parseFloat(document.getElementById('monthlyExpenses').value.replace(/,/g, '')) || 0;
  const taxRate = parseFloat(document.getElementById('taxRate').value) || 0;
  const fixedIncomeAllocation = parseFloat(document.getElementById('fixedIncomeAllocation').value) || 20;			
  // Calculate results
  const totalIncome = baseIncome + bonusIncome;
  const taxes = totalIncome * (taxRate / 100);
  const annualExpenses = monthlyExpenses * 12;
  const freeCashFlow = totalIncome - taxes - annualExpenses;
  const twentyPercent = freeCashFlow * fixedIncomeAllocation / 100;
  // Update the DOM
  document.getElementById('totalIncome').textContent = formatCurrency(totalIncome);
  document.getElementById('taxes').textContent = formatCurrency(taxes);
  document.getElementById('annualExpenses').textContent = formatCurrency(annualExpenses);
  document.getElementById('freeCashFlow').textContent = formatCurrency(freeCashFlow);
  document.getElementById('twentyPercent').textContent = formatCurrency(twentyPercent);
  document.getElementById('annualCarbyneFromIncome').textContent = formatCurrency(twentyPercent);
  return twentyPercent; // Return for total calculation
}

// Calculate portfolio values
function calculatePortfolioValues() {
  // Get input values
  const equities = parseFloat(document.getElementById('equities').value.replace(/,/g, '')) || 0;
  const fixedIncome = parseFloat(document.getElementById('fixedIncome').value.replace(/,/g, '')) || 0;
  const cash = parseFloat(document.getElementById('cash').value.replace(/,/g, '')) || 0;
  const alternatives = parseFloat(document.getElementById('alternatives').value.replace(/,/g, '')) || 0;
  const other = parseFloat(document.getElementById('other').value.replace(/,/g, '')) || 0;
  const fundingYears = parseFloat(document.getElementById('fundingYears').value) || 5;
  // Calculate results
  const totalAssets = equities + fixedIncome + cash + alternatives + other;
  const totalAllocationToCarbyne = fixedIncome + cash;
  const annualCarbyneFromPortfolio = totalAllocationToCarbyne / fundingYears;
  // Update the DOM
  document.getElementById('totalAssets').textContent = formatCurrency(totalAssets);
  document.getElementById('totalAllocationToCarbyne').textContent = formatCurrency(totalAllocationToCarbyne);
  document.getElementById('annualCarbyneFromPortfolio').textContent = formatCurrency(annualCarbyneFromPortfolio);
  document.getElementById('portfolioAllocation').textContent = formatCurrency(annualCarbyneFromPortfolio);
  return { 
    annualCarbyneFromPortfolio: annualCarbyneFromPortfolio,
    totalAllocationToCarbyne: totalAllocationToCarbyne
  }; // Return for total calculation
}

// Calculate total Carbyne allocation
function calculateTotalCarbyne() {
  const incomeAllocation = calculateIncomeValues();
  const portfolioValues = calculatePortfolioValues();
  const totalAllocation = incomeAllocation + portfolioValues.annualCarbyneFromPortfolio;
  document.getElementById('totalAnnualCarbyneAllocation').textContent = formatCurrency(totalAllocation);
  return {
    totalAnnualCarbyneAllocation: totalAllocation,
    totalAllocationToCarbyne: portfolioValues.totalAllocationToCarbyne
  };
}

// Generate projection table
function generateProjectionTable() {
  // Get values from inputs from the first screen
  const currentAge = parseInt(document.getElementById('currentAge').value) || 45;
  const bondYield = parseFloat(document.getElementById('bondYield').value) || 4.5;
  const advisoryFee = parseFloat(document.getElementById('advisoryFee').value) || 1.0;
  const taxRate = parseFloat(document.getElementById('taxRate').value) || 45;
  const fundingYears = parseFloat(document.getElementById('fundingYears').value) || 5;
  const stressTest = document.getElementById('stressTest').checked || false;
  const riskClass = document.getElementById('riskClass').value || 'preferred';
  var perUnitFactor = 0
  var initialDeathBenefitByAge= 0
  var coiScalar = 1 
  if (riskClass == 'preferred') {
    var perUnitFactor = perUnitFactorPref 
    var initialDeathBenefitByAge=initialDeathBenefitByAgePref
    var coiScalar = 0.95 
  } else if (riskClass == 'standard') {
    var perUnitFactor = perUnitFactorStd
    var initialDeathBenefitByAge=initialDeathBenefitByAgeStd
    var coiScalar = 1.5 
  } else {
    var perUnitFactor = perUnitFactorStd
    var initialDeathBenefitByAge=initialDeathBenefitByAgeSubst
    var coiScalar = 3.25 
  }   
  // Get calculated values
  const calculatedValues = calculateTotalCarbyne();
  const carbyneAllocation = calculatedValues.totalAnnualCarbyneAllocation;
  const fixedIncomeCash = calculatedValues.totalAllocationToCarbyne;
  // Clear existing table
  const tableBody = document.getElementById('projectionTableBody');
  tableBody.innerHTML = '';
  // Set initial values
  const currentYear = new Date().getFullYear();
  let currentAllocationStart = fixedIncomeCash;
  let carbyneAllocationStart = fixedIncomeCash;
  let insuranceCashValue = 0;
  // Arrays for chart data
  const agesArray = [];
  const currentAssetsArray = [];
  const carbyneAssetsArray = [];
  const carbyneHeirsArray = [];
  const carbyneWithInsuranceArray = [];
  const faceAmount = initialDeathBenefitByAge[currentAge] * carbyneAllocation / 100000 //CHECK THE SCALAR HERE
  // Generate rows from age+1 to 100
  const summaryTableBody = document.getElementById('summaryTableBody');
  summaryTableBody.innerHTML = '';
  for (let age = currentAge + 1; age <= 100; age++) {
    const year = currentYear + (age - currentAge);
    const yearOfProjection = age - currentAge;
    // Get new savings (allocation from income)
    const incomeAllocation = yearOfProjection <= fundingYears ? calculateIncomeValues(): 0 ;
    // Current Allocation calculations
    const currentReturn = currentAllocationStart * (bondYield / 100);
    const currentTaxesAndFees = - currentReturn * ((taxRate / 100) + (advisoryFee / 100));
    const currentEnd = currentAllocationStart + incomeAllocation + currentReturn + currentTaxesAndFees;
    // Carbyne Allocation calculations
    const carbyneReturn = carbyneAllocationStart * (bondYield / 100);
    const carbyneTaxesAndFees = - carbyneReturn * ((taxRate / 100) + (advisoryFee / 100));
    // Only pay insurance premium for first 5 years
    const carbyneInsurancePremium = yearOfProjection <= fundingYears ? carbyneAllocation : 0;
    const carbyneInsurancePremiumRpt = carbyneInsurancePremium
    const carbyneEnd = carbyneAllocationStart + incomeAllocation + carbyneReturn + carbyneTaxesAndFees - carbyneInsurancePremium;
    // Insurance cash value calculation
    const pctPrem = yearOfProjection <= 1 ? 0.098 : 0.0555
    const pctPremCharge = carbyneInsurancePremium * pctPrem
    const carbyneInsuranceNetPremium = carbyneInsurancePremium - pctPremCharge
    var tempav = insuranceCashValue + carbyneInsuranceNetPremium
    tempav = tempav - perPol
    const unitcharge = yearOfProjection <= 5 ? perUnitFactor[currentAge]: 0
    const perUnitCharge = unitcharge*faceAmount/1000
    tempav = tempav-perUnitCharge
    //deduct COI charge
    coirate = COI[currentAge-20][yearOfProjection-1] * coiScalar
    const persBonus = yearOfProjection <= 15 ? 0.00 : 0.00
    tempav = tempav * (1+persBonus)				
    var idxCredRate = 0.065
    if (stressTest){
      var idxCredRate = yearOfProjection % 7 === 0 ? stressTestRate : 0.065;
    }
    tempav = tempav * (1+idxCredRate)
    insuranceCashValue = tempav  ;
    // Death benefit calculation
    let deathBenefit;
    if (yearOfProjection <= fundingYears) {
      // In first 5 years: use initial death benefit by age plus cash value
      // Get the death benefit for the current age (or default to 500000 if not found)
      const initialBenefit = faceAmount || 500000;
      deathBenefit = initialBenefit + insuranceCashValue;
      // Store death benefit at end of year 5 for future years
      if (yearOfProjection === 5) {
        window.year5DeathBenefit = deathBenefit;
      }
    } else {
      // After year 5: fixed at year 5 death benefit value
      deathBenefit = Math.max(window.year5DeathBenefit, insuranceCashValue *corrFactor[age]); // Fallback if not set
    }
    // Total Carbyne value
    const totalCarbyneValue = carbyneEnd + insuranceCashValue;
    const totalCarbyneNetToHeirs = carbyneEnd + deathBenefit;
    // Store data for chart
    agesArray.push(age);
    currentAssetsArray.push(currentEnd);
    carbyneAssetsArray.push(carbyneEnd);
    carbyneHeirsArray.push(totalCarbyneNetToHeirs);
    carbyneWithInsuranceArray.push(totalCarbyneValue);
    // Performance differences
    const liquidityDifference = carbyneEnd + insuranceCashValue - currentEnd;
    const differenceToHeirs = deathBenefit + carbyneEnd - currentEnd;
    // Create table row
    const row = document.createElement('tr');
    row.style.backgroundColor = (age % 2 === 0) ? '#f8f9fa' : '#ffffff';
    // Add data cells
    row.innerHTML = `
      <td>${age}</td>
      <td>${year}</td>
      <td data-val="${currentAllocationStart}">${formatCurrency(currentAllocationStart)}</td>
      <td data-val="${incomeAllocation}">${formatCurrency(incomeAllocation)}</td>
      <td data-val="${currentReturn}">${formatCurrency(currentReturn)}</td>
      <td data-val="${currentTaxesAndFees}">${formatCurrency(currentTaxesAndFees)}</td>
      <td data-val="${currentEnd}">${formatCurrency(currentEnd)}</td>
      <td data-val="${carbyneAllocationStart}">${formatCurrency(carbyneAllocationStart)}</td>
      <td data-val="${incomeAllocation}">${formatCurrency(incomeAllocation)}</td>
      <td data-val="${carbyneReturn}">${formatCurrency(carbyneReturn)}</td>
      <td data-val="${carbyneTaxesAndFees}">${formatCurrency(carbyneTaxesAndFees)}</td>
      <td data-val="${carbyneInsurancePremiumRpt}">${formatCurrency(carbyneInsurancePremiumRpt)}</td>
      <td data-val="${carbyneEnd}">${formatCurrency(carbyneEnd)}</td>
      <td data-val="${insuranceCashValue}">${formatCurrency(insuranceCashValue)}</td>
      <td data-val="${totalCarbyneValue}">${formatCurrency(totalCarbyneValue)}</td>
      <td data-val="${deathBenefit}">${formatCurrency(deathBenefit)}</td>
      <td data-val="${liquidityDifference}">${formatCurrency(liquidityDifference)}</td>
      <td data-val="${differenceToHeirs}">${formatCurrency(differenceToHeirs)}</td>
    `;  
    tableBody.appendChild(row);
    if (age===65 && currentAge < 65){
      const summaryTableBody = document.getElementById('summaryTableBody');
      const sumRow = document.createElement('tr');
      const carbtotal = carbyneEnd + insuranceCashValue
      sumRow.innerHTML = `
        <td>Age 65</td>
        <td>${formatCurrency(currentEnd)}</td>
        <td>${formatCurrency(carbtotal)}</td>
        <td>${formatCurrency(liquidityDifference)}</td>
      `;
      summaryTableBody.appendChild(sumRow)
    }
    if (age===70 && currentAge < 70){
      const summaryTableBody = document.getElementById('summaryTableBody');
      const sumRow = document.createElement('tr');
      const carbtotal = carbyneEnd + insuranceCashValue
      sumRow.innerHTML = `
        <td>Age 70</td>
        <td>${formatCurrency(currentEnd)}</td>
        <td>${formatCurrency(carbtotal)}</td>
        <td>${formatCurrency(liquidityDifference)}</td>
      `;
      summaryTableBody.appendChild(sumRow)
    }
    if (age===75){
      const summaryTableBody = document.getElementById('summaryTableBody');
      const sumRow = document.createElement('tr');
      const carbtotal = carbyneEnd + insuranceCashValue
      sumRow.innerHTML = `
        <td>Age 75</td>
        <td>${formatCurrency(currentEnd)}</td>
        <td>${formatCurrency(carbtotal)}</td>
        <td>${formatCurrency(liquidityDifference)}</td>
      `;
      summaryTableBody.appendChild(sumRow)
    }
    if (age===80){
      const summaryTableBody = document.getElementById('summaryTableBody');
      const sumRow = document.createElement('tr');
      const carbtotal = carbyneEnd + insuranceCashValue
      sumRow.innerHTML = `
        <td>Age 80</td>
        <td>${formatCurrency(currentEnd)}</td>
        <td>${formatCurrency(carbtotal)}</td>
        <td>${formatCurrency(liquidityDifference)}</td>
      `;
      summaryTableBody.appendChild(sumRow)
    }
    if (age===85){
      const summaryTableBody = document.getElementById('summaryTableBody');
      const sumRow = document.createElement('tr');
      const carbtotal = carbyneEnd + insuranceCashValue
      sumRow.innerHTML = `
        <td>Age 85</td>
        <td>${formatCurrency(currentEnd)}</td>
        <td>${formatCurrency(carbtotal)}</td>
        <td>${formatCurrency(liquidityDifference)}</td>
      `;
      summaryTableBody.appendChild(sumRow)
    }
    if (age===90){
      const summaryTableBody = document.getElementById('summaryTableBody');
      const sumRow = document.createElement('tr');
      const carbtotal = carbyneEnd + insuranceCashValue
      sumRow.innerHTML = `
        <td>Age 90</td>
        <td>${formatCurrency(currentEnd)}</td>
        <td>${formatCurrency(carbtotal)}</td>
        <td>${formatCurrency(liquidityDifference)}</td>
      `;
      summaryTableBody.appendChild(sumRow)
    }
    if (age===95){
      const summaryTableBody = document.getElementById('summaryTableBody');
      const sumRow = document.createElement('tr');
      const carbtotal = carbyneEnd + insuranceCashValue
      sumRow.innerHTML = `
        <td>Age 95</td>
        <td>${formatCurrency(currentEnd)}</td>
        <td>${formatCurrency(carbtotal)}</td>
        <td>${formatCurrency(liquidityDifference)}</td>
      `;
      summaryTableBody.appendChild(sumRow)
    }				
    if (age===100){
      const summaryTableBody = document.getElementById('summaryTableBody');
      const sumRow = document.createElement('tr');
      const carbtotal = carbyneEnd + insuranceCashValue
      sumRow.innerHTML = `
        <td>Age 100</td>
        <td>${formatCurrency(currentEnd)}</td>
        <td>${formatCurrency(carbtotal)}</td>
        <td>${formatCurrency(liquidityDifference)}</td>
      `;
      summaryTableBody.appendChild(sumRow)
    }
    // Update for next iteration
    currentAllocationStart = currentEnd;
    carbyneAllocationStart = carbyneEnd;
  }
  createAssetsComparisonChart(agesArray, currentAssetsArray, carbyneHeirsArray, carbyneWithInsuranceArray);
};

// Create the chart
function createAssetsComparisonChart(ages, currentAssets, carbyneHeirs, carbyneWithInsurance) {
  // Get the canvas element
  const ctx = document.getElementById('assetsComparisonChart').getContext('2d');
  // Check if a chart instance already exists and destroy it
  if (window.assetsChart) {
    window.assetsChart.destroy();
  }
  // Create the chart
  window.assetsChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: ages,
      datasets: [
        {
          label: 'Current Allocation Fixed Income Assets',
          data: currentAssets,
          borderColor: 'rgb(231, 76, 60)', // Accent color
          backgroundColor: 'rgba(231, 76, 60, 0.1)',

          tension: 0.1,
          borderWidth: 2
        },
        {
          label: 'Carbyne net to Heirs',
          data: carbyneHeirs,
          borderColor: 'rgb(52, 152, 219)', // Secondary color
          backgroundColor: 'rgba(52, 152, 219, 0.1)',
          tension: 0.1,
          borderWidth: 2
        },
        {
          label: 'Carbyne FI Assets + Insurance Cash Value',
          data: carbyneWithInsurance,
          borderColor: 'rgb(44, 62, 80)', // Primary color
          backgroundColor: 'rgba(44, 62, 80, 0.1)',
          tension: 0.1,
          borderWidth: 2,
          borderDash: [5, 5]
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        title: {
          display: true,
          text: 'Asset Growth Over Time',
          font: {
            size: 16
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              return context.dataset.label + ': ' + formatCurrency(context.raw);
            }
          }
        },
        legend: {
          position: 'bottom'
        }
      },
      scales: {
        x: {
          title: {
            display: true,
            text: 'Age'
          }
        },
        y: {
          title: {
            display: true,
            text: 'Value ($)'
          },
          ticks: {
            callback: function(value) {
              if (value >= 1000000) {
                return '$' + (value / 1000000).toFixed(1) + 'M';
              } else if (value >= 1000) {
                return '$' + (value / 1000).toFixed(0) + 'K';
              }
              return '$' + value;
            }
          }
        }
      }
    }
  });
}

// === Event listeners (deduped) ===

// text/number inputs → update live on keystroke
[
  // income
  'baseIncome','bonusIncome','monthlyExpenses','taxRate',
  // portfolio
  'equities','fixedIncome','cash','alternatives','other',
  // client numeric/text
  'fundingYears','currentAge','bondYield','advisoryFee','fixedIncomeAllocation'
].forEach(id => {
  const el = document.getElementById(id);
  if (el) {
    el.addEventListener('input', () => { if (autoUpdate) generateProjectionTable(); });
  }
});

// selects/checkboxes → change is more reliable
['stressTest','riskClass'].forEach(id => {
  const el = document.getElementById(id);
  if (el) {
    el.addEventListener('change', () => { if (autoUpdate) generateProjectionTable(); });
  }
});

// Print report
document.getElementById('printReport').addEventListener('click', function() {
  document.querySelectorAll('.card').forEach(card => {
    card.dataset.originalDisplay = card.style.display;
    card.style.display = 'block';
  });
  // Add a temporary print stylesheet
  const printStyle = document.createElement('style');
  printStyle.id = 'print-style';
  printStyle.innerHTML = `
    @media print {
      body {
        background-color: white !important;
      }
      .container {
        max-width: 100% !important;
      }
      header, footer {
        margin-bottom: 20px !important;
      }
      .card {
        page-break-inside: avoid;
        margin-bottom: 30px !important;
        box-shadow: none !important;
        border: 1px solid #ddd !important;
      }
      h2 {
        margin-top: 20px !important;
      }
      .continue-button-container, 
      .form-group button {
        display: none !important;
      }
      /* Make sure the table fits on the page */
      .table-container {
        overflow-x: visible !important;
        font-size: 8pt !important;
      }
      #projectionTable {
        font-size: 8pt !important;
        width: 100% !important;
      }
      #projectionTable th,
      #projectionTable td {
        padding: 4px !important;
      }
      /* Add a page break before the projection section */
      #projectionSection {
        page-break-before: always;
      }
      /* Always show chart on its own page */
      .chart-container {
        page-break-before: always;
        page-break-after: always;
        height: 500px !important;
      }
    }
  `;
  document.head.appendChild(printStyle);
  
  // Trigger print dialog
  window.print();
  
  // Clean up after printing
  setTimeout(function() {
    // Remove the print style
    document.head.removeChild(document.getElementById('print-style'));
    
    // Restore original display states
    document.querySelectorAll('.card').forEach(card => {
      if (card.dataset.originalDisplay) {
        card.style.display = card.dataset.originalDisplay;
        delete card.dataset.originalDisplay;
      }
    });
  }, 1000); // Short delay to ensure print dialog has opened
});

// Save case
function saveCase() {
  // Collect all input values
  const caseData = {
    clientInfo: {
      currentAge: parseFloat(document.getElementById('currentAge').value) || 0,
      bondYield: parseFloat(document.getElementById('bondYield').value) || 0,
      advisoryFee: parseFloat(document.getElementById('advisoryFee').value) || 0,
      fixedIncomeAllocation: parseFloat(document.getElementById('fixedIncomeAllocation').value) || 0
    },
    income: {
      baseIncome: parseFloat(document.getElementById('baseIncome').value) || 0,
      bonusIncome: parseFloat(document.getElementById('bonusIncome').value) || 0,
      monthlyExpenses: parseFloat(document.getElementById('monthlyExpenses').value) || 0,
      taxRate: parseFloat(document.getElementById('taxRate').value) || 0
    },
    portfolio: {
      equities: parseFloat(document.getElementById('equities').value) || 0,
      fixedIncome: parseFloat(document.getElementById('fixedIncome').value) || 0,
      cash: parseFloat(document.getElementById('cash').value) || 0,
      alternatives: parseFloat(document.getElementById('alternatives').value) || 0,
      other: parseFloat(document.getElementById('other').value) || 0
    },
    // Include additional calculated values for reference
    calculatedValues: {
      totalIncome: parseFloat(document.getElementById('totalIncome').textContent.replace(/[^0-9.-]+/g, '')) || 0,
      annualExpenses: parseFloat(document.getElementById('annualExpenses').textContent.replace(/[^0-9.-]+/g, '')) || 0,
      freeCashFlow: parseFloat(document.getElementById('freeCashFlow').textContent.replace(/[^0-9.-]+/g, '')) || 0,
      totalAssets: parseFloat(document.getElementById('totalAssets').textContent.replace(/[^0-9.-]+/g, '')) || 0,
      totalAllocationToCarbyne: parseFloat(document.getElementById('totalAllocationToCarbyne').textContent.replace(/[^0-9.-]+/g, '')) || 0,
      totalAnnualCarbyneAllocation: parseFloat(document.getElementById('totalAnnualCarbyneAllocation').textContent.replace(/[^0-9.-]+/g, '')) || 0
    },
    // Add metadata
    metadata: {
      dateCreated: new Date().toISOString(),
      appVersion: "1.0.0" // You can update this based on your versioning
    }
  };
  // Convert the data to a JSON string with pretty formatting
  const jsonData = JSON.stringify(caseData, null, 2);
  // Create a blob with the JSON data
  const blob = new Blob([jsonData], { type: 'application/json' });
  // Create a temporary URL for the blob
  const url = URL.createObjectURL(blob);
  // Create a temporary link element
  const link = document.createElement('a');
  // Generate a filename with current date
  const date = new Date();
  const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
  // Set the download filename
  link.download = `carbyne-model-${formattedDate}.json`;
  // Set the link href to the blob URL
  link.href = url;
  // Append the link to the body
  document.body.appendChild(link);
  // Trigger the download
  link.click();
  // Clean up
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

// Load case file
loadCaseFile.addEventListener('change', function(event) {
  const file = event.target.files[0];
  if (!file) return;
  // Read the file as text
  const reader = new FileReader();
  reader.onload = function(e) {
    try {
      // Parse the JSON content
      const caseData = JSON.parse(e.target.result);
      // Load the data into the form
      loadCaseData(caseData);
    } catch (error) {
      // Show error message if parsing fails
      console.error('Error parsing JSON file:', error);
      alert('Error loading case data. The file might be invalid or corrupted.');
    }
  };
  reader.onerror = function() {
    alert('Error reading the file. Please try again.');
  };
  // Start reading the file
  reader.readAsText(file);
  // Reset the file input so the same file can be selected again
  loadCaseFile.value = '';
});
  
// Load data into the form fields
function loadCaseData(caseData) {
  autoUpdate=false
  // Load Client Information
  if (caseData.clientInfo) {
    setInputValue('currentAge', caseData.clientInfo.currentAge);
    setInputValue('bondYield', caseData.clientInfo.bondYield);
    setInputValue('advisoryFee', caseData.clientInfo.advisoryFee);
    setInputValue('fixedIncomeAllocation', caseData.clientInfo.fixedIncomeAllocation);
  }
  // Load Income Information
  if (caseData.income) {
    setInputValue('baseIncome', caseData.income.baseIncome);
    setInputValue('bonusIncome', caseData.income.bonusIncome);
    setInputValue('monthlyExpenses', caseData.income.monthlyExpenses);
    setInputValue('taxRate', caseData.income.taxRate);
  }
  // Load Portfolio Information
  if (caseData.portfolio) {
    setInputValue('equities', caseData.portfolio.equities);
    setInputValue('fixedIncome', caseData.portfolio.fixedIncome);
    setInputValue('cash', caseData.portfolio.cash);
    setInputValue('alternatives', caseData.portfolio.alternatives);
    setInputValue('other', caseData.portfolio.other);
  }
  // Trigger recalculation to update all derived values
  // Optional: Visual feedback - highlight fields that were updated
  highlightUpdatedFields();
  autoUpdate=true
  generateProjectionTable()
}

// Helper function to set input value and trigger change event
// Helper: set value + fire both input/change so all listeners run
function setInputValue(id, value) {
  const el = document.getElementById(id);
  if (!el) return;
  el.value = value;
  el.dispatchEvent(new Event('input', { bubbles: true }));
  el.dispatchEvent(new Event('change', { bubbles: true }));
}

// Provide visual feedback for updated fields
function highlightUpdatedFields() {
  // Get all input fields
  const inputFields = document.querySelectorAll('input[type="number"]');
  // Add a temporary highlight class
  inputFields.forEach(function(input) {
    input.classList.add('highlight-updated');
    // Remove the highlight after a short delay
    setTimeout(function() {
      input.classList.remove('highlight-updated');
    }, 2000);
  });
}

// Format numbers
document.querySelectorAll('.formatted-number').forEach(input => {
  // Format initial value on load
  if (input.value) {
    input.value = Number(input.value.replace(/\D/g, "")).toLocaleString();
  }
  input.addEventListener("input", (e) => {
    const rawValue = e.target.value.replace(/\D/g, "");
    if (rawValue) {
      e.target.value = Number(rawValue).toLocaleString();
    } else {
      e.target.value = "";
    }
  });
  input.addEventListener("focus", (e) => {
    const rawValue = e.target.value.replace(/\D/g, "");
    e.target.value = rawValue;
  });
  input.addEventListener("blur", (e) => {
    const rawValue = e.target.value.replace(/\D/g, "");
    if (rawValue) {
      e.target.value = Number(rawValue).toLocaleString();
    }
  });
});

// Password entry form
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('password-form');
  const input = document.getElementById('password');
  const toggleBtn = form.querySelector('.aks-toggle-pword-btn');
  const control = form.querySelector('.aks-form-control');
  const overlay = document.getElementById('password-overlay');
  const correctPassword = 'c4rbyn3';
  toggleBtn.addEventListener('click', () => {
    const isHidden = input.getAttribute('type') === 'password';
    input.setAttribute('type', isHidden ? 'text' : 'password');
    toggleBtn.classList.toggle('is-revealed', isHidden);
    toggleBtn.setAttribute('aria-pressed', String(isHidden));
    toggleBtn.setAttribute('aria-label', isHidden ? 'Hide password' : 'Show password');
    input.focus();
  });
  // Handle submit
  form.addEventListener('submit', (e) => {
    e.preventDefault();
    const oldError = form.querySelector('.aks-alert.aks-alert-error');
    if (oldError) oldError.remove();
    const password = input.value.trim();
    if (password === correctPassword) {
      if (overlay) overlay.style.display = 'none';
      input.value = '';
    } else {
      const error = document.createElement('p');
      error.className = 'aks-alert aks-alert-error';
      error.textContent = 'Incorrect password. Please try again.';
      control.insertAdjacentElement('afterend', error);
      input.value = '';
      input.focus();
    }
  });
});

// Run calculator toggle
document.addEventListener("DOMContentLoaded", function() {
  const button = document.querySelector(".aks-run-calc-wrapper button");
  const inputs = document.getElementById("inputs");
  const projections = document.getElementById("projection");

  if (button && inputs && projections) {
    button.addEventListener("click", function() {
      const showingInputs = !inputs.classList.contains("aks-panel-closed");

      if (showingInputs) {
        // Hide inputs, show projections
        inputs.classList.add("aks-panel-closed");
        projections.classList.remove("aks-panel-closed");

        button.classList.remove("aks-btn-arrow-right");
        button.classList.add("aks-btn-arrow-left");
        button.querySelector("span").innerHTML = "Return to Inputs";
      } else {
        // Show inputs, hide projections
        inputs.classList.remove("aks-panel-closed");
        projections.classList.add("aks-panel-closed");

        button.classList.remove("aks-btn-arrow-left");
        button.classList.add("aks-btn-arrow-right");
        button.querySelector("span").innerHTML = "Run Carbyne Allocation&reg; Analysis";
      }
    });
  }
});

// Calculate initial values
calculateTotalCarbyne();
generateProjectionTable();